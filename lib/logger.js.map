{"version":3,"file":"logger.js","sources":["../src/logger.js"],"sourcesContent":["import _ from 'lodash';\nimport semver from 'semver';\nimport os from 'os';\nimport net from 'net';\nimport tls from 'tls';\nimport urlUtil from 'url';\nimport { Writable } from 'stream';\nimport codependency from 'codependency';\nimport reconnectCore from 'reconnect-core';\nimport * as defaults from './defaults';\nimport * as levelUtil from './levels';\nimport text from './text';\nimport build from './serialize';\nimport {\n    BadOptionsError,\n    LogentriesError\n} from './error';\nimport RingBuffer from './ringbuffer';\nimport BunyanStream from './bunyanstream';\n\n// patterns\nconst newline = /\\n/g;\nconst tokenPattern = /[a-f\\d]{8}-([a-f\\d]{4}-){3}[a-f\\d]{12}/;\n\n// exposed Logger events\nconst errorEvent = 'error';\nconst logEvent = 'log';\nconst connectedEvent = 'connected';\nconst disconnectedEvent = 'disconnected';\nconst timeoutEvent = 'timed out';\nconst drainWritableEvent = 'drain';\nconst finishWritableEvent = 'finish';\nconst pipeWritableEvent = 'pipe';\nconst unpipeWritableEvent = 'unpipe';\nconst bufferDrainEvent = 'buffer drain';\n\n/**\n * Append log string to provided token.\n *\n * @param log\n * @param token\n */\nconst finalizeLogString = (log, token) =>\n    `${token} ${log.toString().replace(newline, '\\u2028')}\\n`;\n\n/**\n * Get console method corresponds to lvl\n *\n * @param lvl\n * @returns {*}\n */\nconst getConsoleMethod = lvl => {\n  if (lvl > 3) {\n    return 'error';\n  } else if (lvl === 3) {\n    return 'warn';\n  }\n  return 'log';\n};\n\n/**\n * Get a new prop name that does not exist in the log.\n *\n * @param log\n * @param prop\n * @returns safeProp\n */\nconst getSafeProp = (log, prop) => {\n  let safeProp = prop;\n  while (safeProp in log) {\n    safeProp = `_${safeProp}`;\n  }\n  return safeProp;\n};\n\nconst requirePeer = codependency.register(module);\n\n\n/**\n * Logger class that handles parsing of logs and sending logs to Logentries.\n */\nclass Logger extends Writable {\n  constructor(opts) {\n    super({\n      objectMode: true\n    });\n\n    // Sanity checks\n    if (_.isUndefined(opts)) {\n      throw new BadOptionsError(opts, text.noOptions());\n    }\n\n    if (!_.isObject(opts)) {\n      throw new BadOptionsError(opts, text.optionsNotObj(typeof opts));\n    }\n\n    if (_.isUndefined(opts.token)) {\n      throw new BadOptionsError(opts, text.noToken());\n    }\n\n    if (!_.isString(opts.token) || !tokenPattern.test(opts.token)) {\n      throw new BadOptionsError(opts, text.invalidToken(opts.token));\n    }\n\n    // Log method aliases\n    this.levels = levelUtil.normalize(opts);\n\n    for (const lvlName of this.levels) {\n      if (lvlName in this) {\n        throw new BadOptionsError(opts, text.levelConflict(lvlName));\n      }\n\n      Object.defineProperty(this, lvlName, {\n        enumerable: true,\n        writable: false,\n        value() {\n          this.log.apply(this, [lvlName, ...arguments]);\n        }\n      });\n    }\n\n    // boolean options\n    this.secure = opts.secure === undefined ? defaults.secure : opts.secure;\n    this.debugEnabled = opts.debug === undefined ? defaults.debug : opts.debug;\n    this.json = opts.json;\n    this.flatten = opts.flatten;\n    this.flattenArrays = 'flattenArrays' in opts ? opts.flattenArrays : opts.flatten;\n    this.console = opts.console;\n    this.withLevel = 'withLevel' in opts ? opts.withLevel : true;\n    this.withStack = opts.withStack;\n    this.withHostname = opts.withHostname || false;\n    this.timestamp = opts.timestamp || false;\n\n    // string or numeric options\n    this.bufferSize = opts.bufferSize || defaults.bufferSize;\n    this.port = opts.port || (this.secure ? defaults.portSecure : defaults.port);\n    this.host = opts.host;\n    this.minLevel = opts.minLevel;\n    this.replacer = opts.replacer;\n    this.inactivityTimeout = opts.inactivityTimeout || defaults.inactivityTimeout;\n    this.disableTimeout = opts.disableTimeout;\n    this.token = opts.token;\n    this.reconnectInitialDelay = opts.reconnectInitialDelay || defaults.reconnectInitialDelay;\n    this.reconnectMaxDelay = opts.reconnectMaxDelay || defaults.reconnectMaxDelay;\n    this.reconnectBackoffStrategy =\n        opts.reconnectBackoffStrategy || defaults.reconnectBackoffStrategy;\n\n    if (!this.debugEnabled) {\n      // if there is no debug set, empty logger should be used\n      this.debugLogger = {\n        log: () => {\n        }\n      };\n    } else {\n      this.debugLogger =\n          (opts.debugLogger && opts.debugLogger.log) ? opts.debugLogger : defaults.debugLogger;\n    }\n\n    const isSecure = this.secure;\n    this.ringBuffer = new RingBuffer(this.bufferSize);\n    this.reconnect = reconnectCore(function initialize() {\n      let connection;\n      const args = [].slice.call(arguments);\n      if (isSecure) {\n        connection = tls.connect.apply(tls, args, () => {\n          if (!connection.authorized) {\n            const errMsg = connection.authorizationError;\n            this.emit(new LogentriesError(text.authError(errMsg)));\n          } else if (tls && tls.CleartextStream && connection instanceof tls.CleartextStream) {\n            this.emit('connect');\n          }\n        });\n      } else {\n        connection = net.connect.apply(null, args);\n      }\n      if (!opts.disableTimeout) {\n        connection.setTimeout(opts.inactivityTimeout || defaults.inactivityTimeout);\n      }\n      return connection;\n    });\n\n    // RingBuffer emits buffer shift event, meaning we are discarding some data!\n    this.ringBuffer.on('buffer shift', () => {\n      this.debugLogger.log('Buffer is full, will be shifting records until buffer is drained.');\n    });\n\n    this.on(bufferDrainEvent, () => {\n      this.debugLogger.log('RingBuffer drained.');\n      this.drained = true;\n    });\n\n    this.on(timeoutEvent, () => {\n      if (this.drained) {\n        this.debugLogger.log(\n            `Socket was inactive for ${this.inactivityTimeout / 1000} seconds. Destroying.`);\n        this.closeConnection();\n      } else {\n        this.debugLogger.log('Inactivity timeout event emitted but buffer was not drained.');\n        this.once(bufferDrainEvent, () => {\n          this.debugLogger.log('Buffer drain event emitted for inactivity timeout.');\n          this.closeConnection();\n        });\n      }\n    });\n  }\n\n  /**\n   * Override Writable _write method.\n   * Get the connection promise .then write the next log on the ringBuffer\n   * to Logentries connection when its available\n   */\n  _write(ch, enc, cb) {\n    this.drained = false;\n    this.connection.then(conn => {\n      const record = this.ringBuffer.read();\n      if (record) {\n        // we are checking the buffer state here just after conn.write()\n        // to make sure the last event is sent to socket.\n        if (this.ringBuffer.isEmpty()) {\n          conn.write(record, () => {\n            process.nextTick(() => {\n              this.emit(bufferDrainEvent);\n              // this event is DEPRECATED - will be removed in next major release.\n              // new users should use 'buffer drain' event instead.\n              this.emit('connection drain');\n            });\n          });\n        } else {\n          conn.write(record);\n        }\n      } else {\n        this.debugLogger.log('This should not happen. Read from ringBuffer returned null.');\n      }\n      cb();\n    }).catch(err => {\n      this.emit(errorEvent, err);\n      this.debugLogger.log(`Error: ${err}`);\n      cb();\n    });\n  }\n\n  setDefaultEncoding() { /* no. */\n  }\n\n  /**\n   * Finalize the log and write() to Logger stream\n   * @param lvl\n   * @param log\n   */\n  log(lvl, log) {\n    let modifiedLevel = lvl;\n    let modifiedLog = log;\n    // lvl is optional\n    if (modifiedLog === undefined) {\n      modifiedLog = modifiedLevel;\n      modifiedLevel = null;\n    }\n\n    let lvlName;\n\n    if (modifiedLevel || modifiedLevel === 0) {\n      [modifiedLevel, lvlName] = this.toLevel(modifiedLevel);\n\n      // If lvl is present, it must be recognized\n      if (!modifiedLevel && modifiedLevel !== 0) {\n        this.emit(errorEvent, new LogentriesError(text.unknownLevel(modifiedLevel)));\n        return;\n      }\n\n      // If lvl is below minLevel, it is dismissed\n      if (modifiedLevel < this.minLevel) {\n        return;\n      }\n    }\n\n    // If log is an array, it is treated as a collection of log events\n    if (_.isArray(modifiedLog)) {\n      if (modifiedLog.length) {\n        for (const $modifiedLog of modifiedLog) this.log(modifiedLevel, $modifiedLog);\n      } else {\n        this.emit(errorEvent, new LogentriesError(text.noLogMessage()));\n      }\n      return;\n    }\n\n    // If log is an object, it is serialized to string and may be augmented\n    // with timestamp and level. For strings, these may be prepended.\n    if (_.isObject(modifiedLog)) {\n      let safeTime;\n      let safeLevel;\n      let safeHost;\n\n      if (this.timestamp) {\n        safeTime = getSafeProp(modifiedLog, 'time');\n        modifiedLog[safeTime] = new Date();\n      }\n\n      if (this.withLevel && lvlName) {\n        safeLevel = getSafeProp(modifiedLog, 'level');\n        modifiedLog[safeLevel] = lvlName;\n      }\n\n      if (this.withHostname) {\n        safeHost = getSafeProp(modifiedLog, 'host');\n        modifiedLog[safeHost] = os.hostname();\n      }\n\n      modifiedLog = this._serialize(modifiedLog);\n\n      if (!modifiedLog) {\n        this.emit(errorEvent, new LogentriesError(text.serializedEmpty()));\n        return;\n      }\n\n      if (this.console) {\n        console[getConsoleMethod(modifiedLevel)](JSON.parse(modifiedLog));\n      }\n\n      if (safeTime) delete modifiedLog[safeTime];\n      if (safeLevel) delete modifiedLog[safeLevel];\n      if (safeHost) delete modifiedLog[safeHost];\n    } else {\n      if (_.isEmpty(modifiedLog)) {\n        this.emit(errorEvent, new LogentriesError(text.noLogMessage()));\n        return;\n      }\n\n      modifiedLog = [modifiedLog.toString()];\n\n      if (this.withLevel && lvlName) {\n        modifiedLog.unshift(lvlName);\n      }\n\n      if (this.withHostname) {\n        modifiedLog.unshift(os.hostname());\n      }\n\n      if (this.timestamp) {\n        modifiedLog.unshift((new Date()).toISOString());\n      }\n\n      modifiedLog = modifiedLog.join(' ');\n\n      if (this.console) {\n        console[getConsoleMethod(modifiedLevel)](modifiedLog);\n      }\n    }\n\n    this.emit(logEvent, modifiedLog);\n\n    // if RingBuffer.write returns false, don't create any other write request for\n    // the writable stream to avoid memory leak this means there are already 'bufferSize'\n    // of write events in the writable stream and that's what we want.\n    if (this.ringBuffer.write(finalizeLogString(modifiedLog, this.token))) {\n      this.write();\n    }\n  }\n\n  /**\n   * Close connection via reconnection\n   */\n  closeConnection() {\n    this.debugLogger.log('Closing retry mechanism along with its connection.');\n    if (!this.reconnection) {\n      this.debugLogger.log('No reconnection instance found. Returning.');\n      return;\n    }\n    // this makes sure retry mechanism and connection will be closed.\n    this.reconnection.disconnect();\n    this.connection = null;\n  }\n\n  // Private methods\n  toLevel(val) {\n    let num;\n\n    if (levelUtil.isNumberValid(val)) {\n      num = parseInt(val, 10); // -0\n    } else {\n      num = this.levels.indexOf(val);\n    }\n\n    const name = this.levels[num];\n\n    return name ? [num, name] : [];\n  }\n\n  get reconnect() {\n    return this._reconnect;\n  }\n\n  set reconnect(func) {\n    this._reconnect = func;\n  }\n\n  get connection() {\n    // The $connection property is a promise. On error, manual close, or\n    // inactivityTimeout, it deletes itself.\n    if (this._connection) {\n      return this._connection;\n    }\n\n    this.debugLogger.log('No connection exists. Creating a new one.');\n    // clear the state of previous reconnection and create a new one with a new connection promise.\n    if (this.reconnection) {\n      // destroy previous reconnection instance if it exists.\n      this.reconnection.disconnect();\n      this.reconnection = null;\n    }\n\n    this.reconnection = this.reconnect({\n      // all options are optional\n      initialDelay: this.reconnectInitialDelay,\n      maxDelay: this.reconnectMaxDelay,\n      strategy: this.reconnectBackoffStrategy,\n      failAfter: Infinity,\n      randomisationFactor: 0,\n      immediate: false\n    });\n\n    this.connection = new Promise((resolve) => {\n      const connOpts = {\n        host: this.host,\n        port: this.port\n      };\n\n      // reconnection listeners\n      this.reconnection.on('connect', (connection) => {\n        this.debugLogger.log('Connected');\n        this.emit(connectedEvent);\n\n        // connection listeners\n        connection.on('timeout', () => {\n          this.emit(timeoutEvent);\n        });\n        resolve(connection);\n      });\n\n      this.reconnection.on('reconnect', (n, delay) => {\n        if (n > 0) {\n          this.debugLogger.log(`Trying to reconnect. Times: ${n} , previous delay: ${delay}`);\n        }\n      });\n\n      this.reconnection.once('disconnect', () => {\n        this.debugLogger.log('Socket was disconnected');\n        this.connection = null;\n        this.emit(disconnectedEvent);\n      });\n\n      this.reconnection.on('error', (err) => {\n        this.debugLogger.log(`Error occurred during connection: ${err}`);\n      });\n\n      // now try to connect\n      this.reconnection.connect(connOpts);\n    });\n    return this.connection;\n  }\n\n  set connection(obj) {\n    this._connection = obj;\n  }\n\n  get reconnection() {\n    return this._reconnection;\n  }\n\n  set reconnection(func) {\n    this._reconnection = func;\n  }\n\n  get debugEnabled() {\n    return this._debugEnabled;\n  }\n\n  set debugEnabled(val) {\n    this._debugEnabled = !!val;\n  }\n\n  get debugLogger() {\n    return this._debugLogger;\n  }\n\n  set debugLogger(func) {\n    this._debugLogger = func;\n  }\n\n  get ringBuffer() {\n    return this._ringBuffer;\n  }\n\n  set ringBuffer(obj) {\n    this._ringBuffer = obj;\n  }\n\n  get secure() {\n    return this._secure;\n  }\n\n  set secure(val) {\n    this._secure = !!val;\n  }\n\n  get token() {\n    return this._token;\n  }\n\n  set token(val) {\n    this._token = val;\n  }\n\n  get bufferSize() {\n    return this._bufferSize;\n  }\n\n  set bufferSize(val) {\n    this._bufferSize = val;\n  }\n\n  get console() {\n    return this._console;\n  }\n\n  set console(val) {\n    this._console = !!val;\n  }\n\n  get serialize() {\n    return this._serialize;\n  }\n\n  set serialize(func) {\n    this._serialize = func;\n  }\n\n  get flatten() {\n    return this._flatten;\n  }\n\n  set flatten(val) {\n    this._flatten = !!val;\n    this.serialize = build(this);\n  }\n\n  get flattenArrays() {\n    return this._flattenArrays;\n  }\n\n  set flattenArrays(val) {\n    this._flattenArrays = !!val;\n    this.serialize = build(this);\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  set host(val) {\n    if (!_.isString(val) || !val.length) {\n      this._host = defaults.host;\n      return;\n    }\n\n    const host = val.replace(/^https?:\\/\\//, '');\n\n    const url = urlUtil.parse(`http://${host}`);\n\n    this._host = url.hostname || defaults.host;\n\n    if (url.port) this.port = url.port;\n  }\n\n  get json() {\n    return this._json;\n  }\n\n  set json(val) {\n    this._json = val;\n  }\n\n  get reconnectMaxDelay() {\n    return this._reconnectMaxDelay;\n  }\n\n  set reconnectMaxDelay(val) {\n    this._reconnectMaxDelay = val;\n  }\n\n  get reconnectInitialDelay() {\n    return this._reconnectInitialDelay;\n  }\n\n  set reconnectInitialDelay(val) {\n    this._reconnectInitialDelay = val;\n  }\n\n  get reconnectBackoffStrategy() {\n    return this._reconnectBackoffStrategy;\n  }\n\n  set reconnectBackoffStrategy(val) {\n    this._reconnectBackoffStrategy = val;\n  }\n\n  get minLevel() {\n    return this._minLevel;\n  }\n\n  set minLevel(val) {\n    const [num] = this.toLevel(val);\n\n    this._minLevel = _.isNumber(num) ? num : 0;\n  }\n\n  get port() {\n    return this._port;\n  }\n\n  set port(val) {\n    const port = parseFloat(val);\n    if (Number.isInteger(port) && _.inRange(port, 65536)) this._port = port;\n  }\n\n  get replacer() {\n    return this._replacer;\n  }\n\n  set replacer(val) {\n    this._replacer = _.isFunction(val) ? val : undefined;\n    this.serialize = build(this);\n  }\n\n  get inactivityTimeout() {\n    return this._inactivityTimeout;\n  }\n\n  set inactivityTimeout(val) {\n    if (Number.isInteger(val) && val >= 0) {\n      this._inactivityTimeout = parseInt(val, 10);\n    }\n\n    if (!_.isNumber(this._inactivityTimeout)) {\n      this._inactivityTimeout = defaults.inactivityTimeout;\n    }\n  }\n\n  get timestamp() {\n    return this._timestamp;\n  }\n\n  set timestamp(val) {\n    this._timestamp = !!val;\n  }\n\n  get withHostname() {\n    return this._withHostname;\n  }\n\n  set withHostname(val) {\n    this._withHostname = val;\n  }\n\n  get withLevel() {\n    return this._withLevel;\n  }\n\n  set withLevel(val) {\n    this._withLevel = !!val;\n  }\n\n  get withStack() {\n    return this._withStack;\n  }\n\n  set withStack(val) {\n    this._withStack = !!val;\n    this.serialize = build(this);\n  }\n\n  get levels() {\n    return this._levels && this._levels.slice();\n  }\n\n  set levels(val) {\n    this._levels = val;\n  }\n\n  get disableTimeout() {\n    return this._disableTimeout;\n  }\n\n  set disableTimeout(val) {\n    this._disableTimeout = !!val;\n  }\n\n  // Deprecated (to support migrants from le_node)\n  level(name) {\n    console.warn(text.deprecatedLevelMethod());\n    if (~this.levels.indexOf(name)) this.minLevel = name;\n  }\n\n  // static methods\n  static winston() {\n    console.warn(text.deprecatedWinstonMethod());\n  }\n\n  /**\n   * Prepare the winston transport\n   * @param winston\n   */\n  static provisionWinston(winston) {\n    if (winston.transports.Logentries) return;\n\n    const Transport = winston.Transport;\n\n    class LogentriesTransport extends Transport {\n      constructor(opts) {\n        super(opts);\n        this.json = opts.json;\n        this.name = 'logentries';\n\n        const transportOpts = _.clone(opts || {});\n\n        transportOpts.minLevel =\n            transportOpts.minLevel || transportOpts.level || this.tempLevel || 0;\n\n        transportOpts.levels = transportOpts.levels || winston.levels;\n        if (semver.satisfies(winston.version, '>=2.0.0')) {\n          // Winston and Logengries levels are reversed\n          // ('error' level is 0 for Winston and 5 for Logentries)\n          // If the user provides custom levels we assue they are\n          // using winston standard\n          const levels = transportOpts.levels;\n          const values = _.values(levels).reverse();\n          transportOpts.levels = {};\n          _.keys(levels).forEach((k, i) => {\n            transportOpts.levels[k] = values[i];\n          });\n        }\n\n        this.tempLevel = null;\n        this.logger = new Logger(transportOpts);\n        this.logger.on('error', err => this.emit(err));\n      }\n\n      log(lvl, msg, meta, cb) {\n        if (this.json) {\n          const message = {\n            message: msg\n          };\n          if (!_.isEmpty(meta)) {\n            if (_.isObject(meta)) {\n              _.defaults(message, meta);\n            } else {\n              message.meta = meta;\n            }\n          }\n\n          this.logger.log(lvl, message);\n        } else {\n          let message = msg;\n          if (!_.isEmpty(meta) || _.isError(meta)) {\n            if (_.isString(message)) {\n              message += ` ${this.logger.serialize(meta)}`;\n            } else if (_.isObject(message)) {\n              message[getSafeProp(message, 'meta')] = meta;\n            }\n          }\n\n          this.logger.log(lvl, message);\n        }\n\n        setImmediate(cb.bind(null, null, true));\n      }\n\n      get tempLevel() {\n        return this._tempLevel;\n      }\n\n      set tempLevel(val) {\n        this._tempLevel = val;\n      }\n\n      get logger() {\n        return this._logger;\n      }\n\n      set logger(obj) {\n        this._logger = obj;\n      }\n\n      get level() {\n        const [, lvlName] =\n            this.logger.toLevel(this.logger.minLevel);\n        return lvlName;\n      }\n\n      set level(val) {\n        if (!this.logger) {\n          this.tempLevel = val;\n        } else {\n          this.logger.minLevel = val;\n        }\n      }\n\n      get levels() {\n        return this.logger.levels.reduce((acc, lvlName, lvlNum) => {\n          const newAcc = acc;\n          newAcc[lvlName] = lvlNum;\n          return newAcc;\n        }, {});\n      }\n    }\n\n    /* eslint no-param-reassign: [\"error\", { \"props\": false }] */\n    winston.transports.Logentries = LogentriesTransport;\n  }\n\n  /**\n   * Prepare a BunyanStream.\n   * @param opts\n   * @returns {{level: *, name: string, stream: BunyanStream, type: string}}\n   */\n  static bunyanStream(opts) {\n    const stream = new BunyanStream(opts);\n    const [, level] = stream.logger.toLevel(stream.logger.minLevel);\n    const type = 'raw';\n    const name = 'logentries';\n\n    // Defer to Bunyan’s handling of minLevel\n    stream.logger.minLevel = 0;\n\n    return { level, name, stream, type };\n  }\n}\n\n// provision winston\nconst winston = requirePeer('winston', { optional: true });\n\nif (winston) Logger.provisionWinston(winston);\n\n// Provision too the winston static versions for testing/development purposes\nconst winston1 = requirePeer('winston1', { optional: true });\nconst winston2 = requirePeer('winston2x', { optional: true });\n\nif (winston1) Logger.provisionWinston(winston1);\nif (winston2) Logger.provisionWinston(winston2);\n\nexport {\n    Logger as default,\n    errorEvent,\n    logEvent,\n    connectedEvent,\n    disconnectedEvent,\n    timeoutEvent,\n    drainWritableEvent,\n    finishWritableEvent,\n    pipeWritableEvent,\n    unpipeWritableEvent,\n    bufferDrainEvent\n};\n"],"names":["reduce","_logger","_tempLevel","bind","isError","message","meta","msg","logger","i","_","default","module","winston2","Transport","winston1","satisfies","_reconnect","Writable","provisionWinston","disableTimeout","length","optional","isUndefined","LogentriesTransport","transportOpts","level","clone","type","writable","BunyanStream","stream","levelConflict","newAcc","parseInt","version","lvlNum","_debugLogger","acc","read","replace","safeProp","requirePeer","text","isString","url","levels","process","tokenPattern","console","CleartextStream","toLevel","once","tempLevel","forEach","k","values","reverse","keys","semver","withHostname","func","optionsNotObj","Logentries","transports","winston","connect","deprecatedWinstonMethod","_disableTimeout","_levels","_withStack","_withLevel","reconnectMaxDelay","inRange","warn","_timestamp","_withHostname","json","minLevel","_inactivityTimeout","_replacer","isFunction","parseFloat","indexOf","_port","isNumber","_minLevel","_reconnectBackoffStrategy","_reconnectMaxDelay","_json","JSON","inactivityTimeout","_reconnectInitialDelay","join","getSafeProp","safeTime","urlUtil","_host","parse","maxDelay","_flattenArrays","serialize","_flatten","_console","_bufferSize","_token","_secure","_ringBuffer","strategy","call","num","authorizationError","obj","RingBuffer","finishWritableEvent","cb","_reconnection","_debugEnabled","delay","pipeWritableEvent","drainWritableEvent","n","connOpts","immediate","resolve","randomisationFactor","ringBuffer","Infinity","isSecure","failAfter","debugLogger","args","isNumberValid","initialDelay","deprecatedLevelMethod","_connection","errorEvent","name","catch","initialize","toString","isArray","getConsoleMethod","timeoutEvent","prop","unknownLevel","val","reconnection","_serialize","disconnect","portSecure","serializedEmpty","port","timestamp","lvl","disconnectedEvent","net","safeHost","hostname","os","Date","toISOString","unshift","safeLevel","noLogMessage","$modifiedLog","ch","bufferDrainEvent","nextTick","errMsg","newline","isEmpty","conn","write","record","then","reconnect","enc","setTimeout","closeConnection","log","drained","on","connection","opts","defaults","apply","emit","tls","LogentriesError","authError","authorized","slice","arguments","bufferSize","secure","debugEnabled","reconnectBackoffStrategy","reconnectInitialDelay","token","replacer","host","withStack","withLevel","flattenArrays","flatten","debug","undefined","lvlName","value","enumerable","BadOptionsError","levelUtil","normalize","invalidToken","test","noToken","isObject","noOptions","objectMode","Logger","codependency","register","finalizeLogString","unpipeWritableEvent","connectedEvent","logEvent"],"mappings":"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"}